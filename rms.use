/*RMS USE Class Model*/

model RMS

/*
DateTime is being used as a standard data type in this case with some basic operations
*/

enum Faculty {ScienceAndTechnology, MedScience, SocialScience, CARIMAC, Law, SchoolOfBusiness}

enum Status {Complete, InProgress, Posted}

enum ResidentStatus {Good, Delinquent, Removed, Inactive}

enum RoomStatus {Occupied, Unoccupied, Dormant, Restoring, Cleaning}


abstract class Role end

abstract class Account
attributes
	balance: UnlimitedNatural
end

abstract class Identifier
attributes
	id: Integer 
end

class Employee < Identifier
attributes
	name: String
end

class DateTime
attributes
	month: Integer
	day: Integer
	year: Integer
	hour: Integer
	minutes: Integer
	second: Real
operations/*
	after(dateTime: DateTime): Boolean
	currentDate(): DateTime*/
end

class Period
attributes
	period: DateTime
end

class Billing < Account end

class Resident < Identifier
attributes
	accountStatus: ResidentStatus
	contact: String
	fac: Faculty
operations
end

class MaintenanceSup < Technician end
class AccountMng < Accountant end
class RoomSup < RoomMng end
class HousekeepingSup < HouseKeeper end

class Room < Identifier
attributes
	roomStatus: RoomStatus
	roomRate: UnlimitedNatural
operations
constraints
	inv noDoubleBooking:
		occupants->select(x| x.reservation.active = true)->size() <= 2
end

class EmployeeTask
attributes
	status: Status
	description: String
constraints
    inv roomsCleaning:
             self.status = Status::Complete implies
                   self.rooms->forAll(roomStatus <> RoomStatus::Restoring or roomStatus  <> RoomStatus::Cleaning)
end

class RoomMng < Role
/*
operations
	cancelReservation(room: Room, res: Resident): OclVoid
	verifyReservation(room: Room, res: Resident): OclVoid
	modifyReservation(room: Room, res: Resident): OclVoid
*/
end
class HouseKeeper < Role end
class Technician < Role end
class Accountant < Role end

/*Association Classes*/

associationclass Reservation
between
	Room[1] role room
	Resident[*] role occupants ordered
attributes
	active: Boolean
	shortTerm: Boolean
	days: Integer derived= 0
	/* This attribute is derived by subtracting the number of days in the first period from the number of days in the last period

	Value should be init: 0 at first

	=checkinout->last().difference(checkinout->first())*/
constraints
	inv reservationLimit:
		days <= 275
	inv overStay:
		days < 120 implies shortTerm= true
	inv checkoutDate:
		active = true implies checkinout->size() = 1 and checkinout->size() = 1 implies active = true
end


/*Associations*/
association EmployeeTasks
between
	Employee[*] role employee
	EmployeeTask [*] role tasks ordered
end

association RoomTask
between
	EmployeeTask [*] role task ordered
	Room [1..*] role rooms
end

association ManageReservation
between
	RoomMng [1..*] role roommanagement
	Reservation [*] role reservations
end

association EmployeeRole
between
	Employee [*] role employees
	Role [1] role role
end

association Management
between
	Employee [*] role employee
	Employee [1..*] role manager
end

association ReservationPeriod
between
	Reservation [1] role reservation
	Period [1..2] role checkinout ordered
end

association ResidentAccount
between
	Resident [1..*] role resident
	Account [1] role account
end

association Rent
between
	Reservation [1] role booking
	Account [1] role payment
end